---
- name: Proxmox | Machines - Install the requirements
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - python3
    - python3-proxmoxer

- name: Proxmox | Machines - Gather facts
  block:
    - name: Proxmox | Machines - Get next VM ID
      ansible.builtin.shell:
        cmd: pvesh get /cluster/nextid
      register: proxmox_nextid
    
    - name: Proxmox | Machines - Check minimum VM ID condition
      ansible.builtin.set_fact:
        proxmox_nextid: "{{ proxmox_minid_machines | int }}"
      when: proxmox_nextid['stdout'] | int < proxmox_minid_machines | int
    
- name: Proxmox | Machines - Create the VMs
  block:
    - name: Proxmox | Machines - Clone the template
      community.general.proxmox_kvm:
        state: present
        # identifiers
        newid: "{{ (item['ip'] | split('.') | last | int + proxmox_minid_machines)|default(proxmox_nextid | int + index) }}"
        name: "{{ item['name'] }}"
        clone: "{{ item['template'] }}"
        full: true
        # connection
        api_host: "{{ ansible_host }}"
        api_user: "{{ ansible_user }}@pam"
        api_password: "{{ ansible_password }}"
        node: "{{ ansible_hostname }}"
      with_items: "{{ proxmox_machines }}"
      loop_control:
        index_var: index

    - name: Proxmox | Machines - Configure the VMs
      ansible.builtin.shell: >
        qm set {{ (item['ip'] | split('.') | last | int + proxmox_minid_machines)|default(proxmox_nextid | int + index) }}
        --name {{ item['name'] }}
        --description "{{ item['description']|default('Clone of ' + item['template']) }}"
        --agent 1
        --autostart 1
        --boot c,order=scsi0
        --ciuser {{ item['user']|default(proxmox_default_user) }}
        --cipassword {{ item['password']|default(proxmox_default_password) }}
        --ciupgrade 1
        --cores {{ item['cores']|default(proxmox_default_cores) }}
        --ipconfig0 gw={{ item['gateway']|default(proxmox_default_gateway) }},ip={{ item['ip']|default( ((proxmox_default_gateway | split('.'))[0:3] | join('.')) + '.' + (((proxmox_nextid | string)[-1] | int + index + 100) | string) ) }}/24
        --keyboard en-us
        --memory {{ item['memory']|default(proxmox_default_memory) }}
        --net0 virtio,bridge=vmbr0
        --onboot 1
        --ostype {{ item['os']|default(proxmox_default_os) }}
        --scsihw virtio-scsi-pci
        --searchdomain {{ homelab_domain|default(proxmox_default_domain) | split('.') | first }}
        --tags {{ item['tags']|default(proxmox_default_tags) | join(',') }}
      with_items: "{{ proxmox_machines }}"
      loop_control:
        index_var: index

    - name: Proxmox | Machines - Start all the VMs
      community.general.proxmox_kvm:
        # status
        name: "{{ item['name'] }}"
        state: restarted
        # connection
        api_host: "{{ ansible_host }}"
        api_user: "{{ ansible_user }}@pam"
        api_password: "{{ ansible_password }}"
        node: "{{ ansible_hostname }}"
      with_items: "{{ proxmox_machines }}"