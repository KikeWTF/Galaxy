---
- name: Proxmox | Templates - Gather facts
  block:
    - name: Proxmox | Templates - Get next VM ID
      ansible.builtin.shell:
        cmd: pvesh get /cluster/nextid
      register: proxmox_nextid
    
    - name: Proxmox | Templates - Check minimum VM ID condition
      ansible.builtin.set_fact:
        proxmox_nextid: "{{ proxmox_minid_templates | int }}"
      when: proxmox_nextid['stdout'] | int < proxmox_minid_templates | int
  
- name: Proxmox | Templates - Download the templates
  block:
    - name: Proxmox | Templates - Ensure that ISO folder is created
      ansible.builtin.file:
        path: "{{ proxmox_isofolder }}"
        state: directory
        mode: 0755
        owner: root
        group: root
    
    - name: Proxmox | Templates - Download the templates
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ proxmox_isofolder }}/{{ item.name }}.qcow2"
        mode: 0444
        owner: root
        group: root
      with_items: "{{ proxmox_templates }}"

- name: Proxmox | Templates - Create the VMs
  block:
    - name: Proxmox | Templates - Resize images
      ansible.builtin.shell: >
        qemu-img resize {{ proxmox_isofolder }}/{{ item.name }}.qcow2 {{ proxmox_default_disk }}
      with_items: "{{ proxmox_templates }}"

    - name: Proxmox | Templates - Create the base VMs
      ansible.builtin.shell: >
        qm create {{ proxmox_nextid | int + index }}
        --name {{ item['name'] }}
        --description "{{ item['description'] }}"
        --ciupgrade 1
        --ciuser {{ item['user']|default(proxmox_default_user) }}
        --cipassword {{ item['password']|default(proxmox_default_password) }}
        --agent 1
        --autostart 1
        --boot c,order=scsi0
        --cores {{ item['cores']|default(proxmox_default_cores) }}
        --ide2 {{ item['storage']|default(proxmox_default_storage) }}:cloudinit
        --ipconfig0 gw={{ item['gateway']|default(proxmox_default_gateway) }},ip={{ item['ip']|default( ((proxmox_default_gateway | split('.'))[0:3] | join('.')) + '.' + (((proxmox_nextid | string)[-1] | int + index + 100) | string) ) }}/24
        --keyboard en-us
        --memory {{ item['memory']|default(proxmox_default_memory) }}
        --net0 virtio,bridge=vmbr0
        --ostype {{ item['os']|default(proxmox_default_os) }}
        --scsi0 {{ item['storage']|default(proxmox_default_storage) }}:0,import-from={{ proxmox_isofolder }}/{{ item['name'] }}.qcow2
        --scsihw virtio-scsi-pci
        --serial0 socket
        --searchdomain {{ homelab_domain|default(proxmox_default_domain) | split('.') | first }}
        --tags {{ item['tags']|default(proxmox_default_tags) }}
        --vga serial0
      register: proxmox_check_createvm
      failed_when: proxmox_check_createvm['rc'] != 0 and 'already exists' not in proxmox_check_createvm['stderr']
      with_items: "{{ proxmox_templates }}"
      loop_control:
        index_var: index

- name: Proxmox | Templates - Create the templates
  block:
    - name: Proxmox | Templates - Wait for the VM to be created
      ansible.builtin.wait_for:
        path: /etc/pve/qemu-server/{{ proxmox_nextid | int + index }}.conf
        state: present
        timeout: 60
      with_items: "{{ proxmox_templates }}"
      loop_control:
        index_var: index
    
    - name: Proxmox | Templates - Convert to templates
      ansible.builtin.shell:
        cmd: qm template {{ proxmox_nextid | int + index }}
      register: proxmox_check_template
      failed_when: proxmox_check_template['rc'] != 0 and 'template to a template' not in proxmox_check_template['stderr']
      with_items: "{{ proxmox_templates }}"
      loop_control:
        index_var: index